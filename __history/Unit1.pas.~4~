unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.OleCtrls, SHDocVw, Vcl.StdCtrls,
  GoogleOAuth, IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, DBXJSON,
  IdHTTP, IdIOHandler, IdStack, IdException, IdIOHandlerSocket, IdIOHandlerStack, IdSSL, IdSSLOpenSSL,
  Vcl.ExtCtrls, IdCoder, IdCoder3to4, IdCoderMIME, ComObj, ActiveX, Registry,
 Vcl.ComCtrls, Grids;

type

   TGoogleAuthThread = class(TThread)
    private
    { Private declarations }
  protected
    procedure Execute; override;
  public
      FormHandle: HWND;
      procedure IsTerminate(Sender : TObject);
  end;


  TMyGrid = class (TStringGrid);

  TForm1 = class(TForm)
    OAuth1: TOAuth;
    edToken: TEdit;
    IdHTTP1: TIdHTTP;
    IdSSLIOHandlerSocketOpenSSL1: TIdSSLIOHandlerSocketOpenSSL;
    Calendars: TComboBox;
    OpenXls: TOpenDialog;
    btnOpenXls: TButton;
    PageControl1: TPageControl;
    btnSendEvents: TButton;
    btnGetGoogleCalendars: TButton;
    btnConfirm: TButton;
    btnClearCalendar: TButton;
    StatusBar1: TStatusBar;
    lbEventsCount: TLabel;
    ComboBox1: TComboBox;
    ComboBox2: TComboBox;
    Label1: TLabel;
    Button1: TButton;


  
    procedure Button5Click(Sender: TObject);
    procedure btnOpenXlsClick(Sender: TObject);
    procedure btnSendEventsClick(Sender: TObject);
    procedure InsertEvent(Source:TStringStream);
    procedure btnGetGoogleCalendarsClick(Sender: TObject);
    procedure getCalendarsList;
    procedure GetSecretCode;
    procedure btnConfirmClick(Sender: TObject );
    procedure CalendarsChange(Sender: TObject);
    procedure btnClearCalendarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure AddRegistry;


  private
     procedure OnClickCb(Sender: TObject);
    { Private declarations }
  public
     FJSONObject: TJSONObject;
     GoogleAuthThread: TGoogleAuthThread;
    { Public declarations }
  end;




var
  Form1: TForm1;
  GoogleAuthThread: TGoogleAuthThread;
  Token:string;
  MyExcel: OleVariant;
  Cb:TCheckBox;
  Te:TEdit;
  ApplicationPath,ApplicationName, calendarID:string;
   ExcelStatus, GAuothStatus:boolean;
  const ExcelApp = 'Excel.Application';

implementation
   uses  Unit2, Unit3, Unit4, Unit5;
{$R *.dfm}


procedure ShowNotification(NotifMessage: string);
begin
  //TNotification.Create(Self);
  Notification.NotifMessage.Caption:=NotifMessage;
  Notification.Show;
end;


//перевірка наявності встановленого Excel
function CheckExcelInstall:boolean;
var
  ClassID: TCLSID;
  Rez : HRESULT;
begin
// Ищем CLSID OLE-объекта
  Rez := CLSIDFromProgID(PWideChar(WideString(ExcelApp)), ClassID);
  if Rez = S_OK then  // Объект найден
    Result := true
  else
    Result := false;
end;

//перевірка чи запущений Excel
function CheckExcelRun: boolean;
begin
  try
    MyExcel:=GetActiveOleObject(ExcelApp);
    Result:=True;
  except
    Result:=false;
  end;
end;

//Запуск Excel
function RunExcel(DisableAlerts:boolean=true; Visible: boolean=false): boolean;
begin
  try
{проверяем установлен ли Excel}
    if CheckExcelInstall then
      begin
        MyExcel:=CreateOleObject(ExcelApp);
//показывать/не показывать системные сообщения Excel (лучше не показывать)
        MyExcel.Application.EnableEvents:=DisableAlerts;
        MyExcel.Visible:=Visible;
        Result:=true;

      end
    else
      begin
        MessageBox(0,'Приложение MS Excel не установлено на этом компьютере','Ошибка',MB_OK+MB_ICONERROR);
        Result:=false;
      end;
  except
    Result:=false;
  end;
end;

// Закриваємо Excel
function StopExcel:boolean;
begin
  try
    if MyExcel.Visible then MyExcel.Visible:=false;
    MyExcel.Quit;
    MyExcel:=Unassigned;
    Result:=True;
  except
    Result:=false;
  end;
end;


procedure xls_open(FileName:WideString);
var Rows, TotalRows, Cols, i,j,z: integer;
    WorkSheet: OLEVariant;
    FData: OLEVariant;
    d: TDateTime;
    NPageControl: TPageControl;
    NTab: TTabSheet;
    Sg: TStringGrid;
    Cb:TCheckBox;
    Te:TEdit;


begin
      RunExcel;

  //открываем книгу
  MyExcel.Workbooks.Open(FileName);

//выводим данные в таблицу

for i :=1  to MyExcel.Sheets.Count do
  begin
  //получаем активный лист
  WorkSheet:=MyExcel.ActiveWorkbook.Worksheets.Item[i];
  //определяем количество строк и столбцов таблицы
  Rows:=WorkSheet.UsedRange.Rows.Count;
  Cols:=WorkSheet.UsedRange.Columns.Count;
  NTab := TTabSheet.Create(Form1.PageControl1);
   with NTab do
    begin
      PageControl := Form1.PageControl1;
      Form1.PageControl1.Brush.Color  := RGB(211,231,232);
      Form1.PageControl1.Pages[PageIndex].Brush.Color:=clYellow;
      PageControl.ClientWidth:=470;
      Ntab.ClientWidth:=470;
     // Caption := String(MyExcel.Sheets.Item[i].Name);
      caption:=String(MyExcel.ActiveWorkbook.Worksheets.Item[i].Name);
      Sg:=TStringGrid.Create(NTab);
      Sg.Parent:=NTab;
      Sg.FixedCols:=0;Sg.FixedRows:=0;
      Sg.Clientwidth:=PageControl.ClientWidth;
      Sg.Height:=220;
     // Sg.OnDrawCell:=SGDrawCell;

      Cb:=TCheckBox.Create(NTab);
      Cb.Parent:=NTab;
      //TCheckBox(Cb).OnClick:=OnClickCb;
      Cb.Caption:='Поділитись...';
      Cb.Top:=225;

      Te:=TEdit.Create(NTab);
      Te.Parent:=NTab;
      Te.Visible:=True;
      Te.TextHint:='email';
      Te.Top:=225;
      Te.Left:=150;


     end;
   Sg.RowCount:=Rows;
      Sg.ColCount:=Cols;
    z:=0;
     (Form1.PageControl1.Pages[0].Components[0] as TStringGrid).Width := 470;
    //Form1.ProgressBar1.Max:=ProgressBar1.Max+(Sg.ColCount+Sg.RowCount);
    FData:=WorkSheet.UsedRange.Value;
            while (z<=sg.RowCount-1) do begin
            for j := 0 to Cols-1 do
              sg.Cells[j,z]:=FData[z+1,j+1];
              if Trim(Sg.Rows[z].Text) = '' then begin TMyGrid(Sg).DeleteRow(z); z:=z-1; TotalRows:=TotalRows-1;end;   //видалення пустих рядків
              z:=z+1;
            end;
                     end;

   Form1.StatusBar1.Panels[0].width:=150;
   Form1.StatusBar1.Panels[0].text:=Form1.StatusBar1.Panels[0].text+'Листів:'+String(MyExcel.Sheets.Count)+' Подій:-'+IntToStr(TotalRows);
   StopExcel;
   ShowNotification('Excel file is loaded');
   ExcelStatus:=true;
   Form1.PageControl1.Visible:=true;

end;


//take path of xls-file from open-dialog
procedure TForm1.btnOpenXlsClick(Sender: TObject);
var FileName:string;
begin
 OpenXls.Filter :=' Файлы MS Excel|*.xls;*.xlsx|';
  if OpenXls.InitialDir = '' then
    OpenXls.InitialDir := ExtractFilePath(Application.ExeName);
  if not OpenXls.Execute then Exit;
  FileName := OpenXls.FileName;
  xls_open (WideString(FileName));
  //Label1.Caption:=String('Шлях: ')+string(FileName);
  if not FileExists(FileName) then begin
    ShowMessage('Увага! Файл з вказаним іменем відсутній. Дію скасовано.');
    Exit;
  end;
end;



procedure TForm1.OnClickCb(Sender: TObject);
    var tab:string;
    begin
      tab:=IntToStr(PageControl1.ActivePageIndex);
     if (Sender as TCheckBox).Checked
       then (PageControl1.Pages[PageControl1.ActivePageIndex].Components[2] as TEdit).Visible := true
       else (PageControl1.Pages[PageControl1.ActivePageIndex].Components[2] as TEdit).Visible := false;
    end;


procedure TForm1.btnSendEventsClick(Sender: TObject);
 var
  tabs, i,j,z:integer;
  summary, dtstart, dtend, capt, desc,event, tab, guest,mail_guest:string;
 //JSON
    JSONObject, InnerObject : TJSONObject;
    Pair : TJSONPair;
    JsonArray: TJSONArray;
    S:TStringList;
    Source1: TStringStream;
  begin
    S:=TStringList.Create;
        //  Memo4.Clear;
          {создали объект верхнего уровня}
  try
     for tabs:=0 to PageControl1.PageCount-1 do
    begin
   // if ((PageControl1.Pages[tabs].Components[1] as TCheckBox).Checked = True) then
                          mail_guest:=(PageControl1.Pages[tabs].Components[2] as TEdit).Text;
    for z:=0 to PageControl1.Pages[tabs].ComponentCount-1 do
      if  PageControl1.Pages[tabs].Components[z] is TStringGrid then
        begin

         for i:=1 to (PageControl1.Pages[tabs].Components[z] as TStringGrid).RowCount-1 do
      begin
         if True then
           begin
         //if (StrToDate((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[1,i]))<Now
         //then label1.Caption:=DateToStr((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[1,i]);
         JSONObject:=TJSONObject.Create;
         // Memo4.Clear;

         {создали пару}
          Pair:=TJSONPair.Create('summary',(PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[2,i]+' урок: '+String(PageControl1.Pages[tabs].Caption));
          {записали пару в объект}
          JSONObject.AddPair(Pair);

          {записываем в объект массив}
          //создали пустой массив
          JsonArray:=TJSONArray.Create();
          dtstart:=Copy((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[1,i], 7, 4)+'-'+Copy((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[1,i], 4, 2)+'-'+Copy((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[1,i], 1, 2)+'T'+Form2.StringGrid1.Cells[1,StrToInt((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[2,i])]+':00+02:00';
          label1.Caption:=dtstart;
          JsonArray.AddElement(TJSONObject.Create(TJSONPair.Create('dateTime',dtstart)));
          JsonArray.AddElement(TJSONObject.Create(TJSONPair.Create('timeZone','Europe/Kiev')));
          //записали массив в объект
          JSONObject.AddPair('start',JsonArray);

          JsonArray:=TJSONArray.Create();
          dtend:=Copy((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[1,i], 7, 4)+'-'+Copy((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[1,i], 4, 2)+'-'+Copy((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[1,i], 1, 2)+'T'+Form2.StringGrid1.Cells[2,StrToInt((PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[2,i])]+':00+02:00';
          JsonArray.AddElement(TJSONObject.Create(TJSONPair.Create('dateTime',dtend)));
          JsonArray.AddElement(TJSONObject.Create(TJSONPair.Create('timeZone','Europe/Kiev')));
          //записали массив в объект
          JSONObject.AddPair('end',JsonArray);
        //  JsonArray.Destroy;

          if (mail_guest<>'') then
          begin
          JsonArray:=TJSONArray.Create();
          JsonArray.AddElement(TJSONObject.Create(TJSONPair.Create('email',mail_guest)));
          //записали массив в объект
          JSONObject.AddPair('attendees',JsonArray);
          end;
           {создали пару}
          desc:='Урок №'+(PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[0,i]+': '+(PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[4,i]+'\nД/З: З підручника:'+(PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[5,i]+'\nВиконати:'+(PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[6,i];
          Pair:=TJSONPair.Create('description',desc);
          {записали пару в объект}
          JSONObject.AddPair(Pair);

          Pair:=TJSONPair.Create('location','Кабінет '+(PageControl1.Pages[tabs].Components[z] as TStringGrid).Cells[3,i]);
          JSONObject.AddPair(Pair);

          Pair:=TJSONPair.Create('colorId','2');
          JSONObject.AddPair(Pair);

            Source1:=TStringStream.Create;
            S.Add(JSONObject.ToString);
            S.SaveToStream(Source1);
            //ShowMessage(Source1.DataString);
            InsertEvent(Source1);
           // memo4.Lines.Add(Source1.DataString);
            JsonObject.Destroy;
            Source1.Destroy;
            S.Clear;
       end;
      end;

    end;
      // Source:=S;
      // Memo4.Text:=S.Text;

       S.Clear;

       //ShowMessage(S.Text);
    end;
     finally
           S.Free;
           ShowNotification('Events is added to GCalendar');
          // JSONObject.Destroy;


  end;


end;











 {
function TasksGet(const ListID: string; TaskID: string): string;
begin
OAuth1.GetAccessToken
Result := UTF8ToString(OAuth1.GetAccessToken);
end;
   }
   {
procedure TForm1.btnPostQueryClick(Sender: TObject);
var
  Json, URL, calendarID: string;
  sResponse: string;
    JsonToSend, Answer: TStringStream;
begin
    calendarID:='76pgvkbu9h1mr5r17i3ehps214@group.calendar.google.com';
    URL:='https://www.googleapis.com/calendar/v3/calendars/76pgvkbu9h1mr5r17i3ehps214@group.calendar.google.com/events?access_token='+Token;

        memo7.Text:=Url;
        IdHTTP1.HandleRedirects := True;
        IdHTTP1.Request.ContentType :='application/json';
        IdHTTP1.Response.ContentType :='application/json';
        IdHTTP1.Request.UserAgent:='Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36';
        IdHTTP1.Request.Accept := 'application/json, text/javascript, */*; q=0.01';
        IdHTTP1.Request.ContentType := 'application/x-www-form-urlencoded; charset=UTF-8';
        idHTTP1.Request.CharSet := 'windows-1251';
     try
       JsonToSend:=TStringStream.Create;
       try
         Answer:=TStringStream.Create;
         try
         Memo4.Lines.SaveToStream(JsonToSend);
         idHTTP1.Post(URL,JsonToSend,Answer);
         memo6.Clear;
         memo6.Lines.Add(Answer.DataString);
         memo6.Text:=(UTF8Decode(Memo6.Text));
       finally
       Answer.Free;

       end;
     finally
      JsonToSend.Free;

     end;
     except
  on E:EIdHTTPProtocolException do
    begin
      memo6.Clear;
       showmessage(E.ErrorMessage);
      memo6.Lines.Add('-------------Error-------------');
      memo6.Lines.Add('-------------ErrorMessage-------------');
          end
  else
    raise;

     end;
end;
   }





procedure TForm1.btnGetGoogleCalendarsClick(Sender: TObject);
begin
GetSecretCode;
end;

procedure TForm1.GetSecretCode;
begin
Form3.Show;
Form3.PopupBrowser.Navigate(OAuth1.AccessURL);
edToken.Visible:=true;
edToken.Text:=access;
btnConfirm.Visible:=true;
end;

// повертає Token: вхідний параметр секретний ключ
function getToken(SecretCode:string):string;
begin
Form1.OAuth1.ResponseCode:=SecretCode;
Token:=Form1.OAuth1.GetAccessToken;
Token:=Trim(Token);
Result:=Token;
end;

procedure TForm1.getCalendarsList;
 var URL:string;
      i:integer;
      JsonArray: TJSONArray;
     begin
  URL:='https://www.googleapis.com/calendar/v3/users/me/calendarList?access_token='+Token;
  {Парсинг}
 FJSONObject:=TJSONObject.ParseJSONValue(Form1.IdHTTP1.Get(URL))as TJSONObject;
 Calendars.Clear;
 Calendars.Text:='Select the calendar...';
 {получаем масиив из значения пары с названием "items"}
  JsonArray:=FJSONObject.Get('items').JsonValue as TJSONArray;
  for I := 0 to JsonArray.Size-1 do
      Calendars.Items.Add((JsonArray.Get(i) as TJSONObject).Get('summary').JsonValue.Value);
 {Пари: Вивід Ключа}



  end;
// Процес
procedure TGoogleAuthThread.Execute;
begin
  OnTerminate := IsTerminate;
  Token:=getToken(Form1.edToken.Text);
  //if Token<>'' then Terminated:=true;

end;

procedure TGoogleAuthThread.IsTerminate(Sender : TObject);
begin
  with Sender as TGoogleAuthThread do begin
    //При завершении потока уменьшаем счётчик потоков на единицу.
    Form1.getCalendarsList;
    ShowNotification('Доступ до календарів Google отримано');
    GAuothStatus:=true;
    Form1.Calendars.Visible:=true;
    Form1.StatusBar1.Panels[1].text:=Form1.StatusBar1.Panels[0].text;
     end;
end;
// Процес




procedure TForm1.btnClearCalendarClick(Sender: TObject);
var URL, id:string;
  i:integer;
  JsonArrayEvents: TJSONArray;
  FJSONObjectCalendar:TJSONObject;
begin
{IdHTTP1.HandleRedirects := true;}
 ComboBox2.Clear;
 ComboBox2.Text:='Not Deleted....';
 URL:='https://www.googleapis.com/calendar/v3/calendars/'+calendarId+'/events/?access_token='+Token+'&maxResults=2500';
 //URL:='https://www.googleapis.com/calendar/v3/users/me/calendarList?access_token='+Token;
 {Парсинг}
 FJSONObjectCalendar:=TJSONObject.ParseJSONValue(IdHTTP1.Get(URL))as TJSONObject;
// FJSONObject:=TJSONObject.ParseJSONValue(Form1.IdHTTP1.Get(URL))as TJSONObject;
 {получаем масиив из значения пары с названием "items"}
  JsonArrayEvents:=FJSONObjectCalendar.Get('items').JsonValue as TJSONArray;
  for I := 0 to JsonArrayEvents.Size-1 do
  begin
      id:=(JsonArrayEvents.Get(i) as TJSONObject).Get('id').JsonValue.Value;
      if ((JsonArrayEvents.Get(i) as TJSONObject).Get('status').JsonValue.Value)='confirmed' then
        begin
        URL:='https://www.googleapis.com/calendar/v3/calendars/'+calendarId+'/events/'+id+'/?access_token='+Token;
        IdHTTP1.Delete(URL);
        end
      else ComboBox2.Items.Add(Id);
     end;
  JsonArrayEvents.Free;
  {Пари: Вивід Ключа}

end;

procedure TForm1.btnConfirmClick(Sender: TObject);
begin
  btnConfirm.Enabled:=false;
  GoogleAuthThread:=TGoogleAuthThread.Create(true);
  GoogleAuthThread.Priority:=tpNormal;
  GoogleAuthThread.FormHandle := Self.Handle;
  GoogleAuthThread.FreeOnTerminate := false;
  GoogleAuthThread.Resume;
 //Memo1.Lines.Add('Access Token = '+Token);//получаем токен
end;



procedure TForm1.InsertEvent(Source:TStringStream);
var Response: TStringStream;
URL:string;
begin
    Token:=UTF8Encode(Token);
    URL:='https://www.googleapis.com/calendar/v3/calendars/'+calendarID+'/events?access_token='+Token;
    idHTTP1.Request.ContentType := 'application/json';
    idHTTP1.Request.CharSet := 'windows-1251';
    IdHTTP1.HandleRedirects := True;
  try
  //Source:=TStringStream.Create;
  try
    Response:=TStringStream.Create;
    try
       //Memo4.Lines.SaveToStream(Source);
       //ShowMessage(Source.DataString);
       idHTTP1.Post(URL,Source,Response);
      // memo6.Clear;
      // memo6.Lines.Add(Response.DataString);
      // memo6.Text:=(UTF8Decode(Memo6.Text));
    finally
     Response.Free
    end;
  finally
    //Source.Free;
  end;
except
  on E:EIdHTTPProtocolException do
    begin
    //  memo6.Clear;
      showmessage(E.ErrorMessage);
    //  memo6.Lines.Add('-------------Error-------------');
    //  memo6.Lines.Add('-------------ErrorMessage-------------');
          end
  else
    raise;
end;
end;


// !!!!DELETE ??????????




procedure TForm1.Button1Click(Sender: TObject);
begin
Form2.Show;
end;

procedure TForm1.Button5Click(Sender: TObject);
var JsonArray: TJSONArray;
    i: integer;
begin
  {получаем масиив из значения пары с названием "items"}
  JsonArray:=FJSONObject.Get('items').JsonValue as TJSONArray;
  for I := 0 to JsonArray.Size-1 do
    // Memo2.Lines.Add((JsonArray.Get(i) as TJSONObject).Get('summary').JsonValue.Value)
end;

procedure TForm1.CalendarsChange(Sender: TObject);
var i:integer; JsonArray,JsonArrayEvents: TJSONArray;
  URL, EventId:string;
  Events:TJSONObject;
begin
   btnClearCalendar.Visible:=true;
  if (ExcelStatus and GAuothStatus) then btnSendEvents.Visible:=true;
  lbEventsCount.Caption:='Усього подій: ';
  ComboBox1.Clear;
  ComboBox1.Text:='Events ID....';
//Memo4.Clear;
 {получаем масиив из значения пары с названием "items"}
  JsonArray:=FJSONObject.Get('items').JsonValue as TJSONArray;
  for I := 0 to JsonArray.Size-1 do begin
    if((JsonArray.Get(i) as TJSONObject).Get('summary').JsonValue.Value=Calendars.Text)
      then
      begin
  //    Memo4.Text := (JsonArray.Get(i) as TJSONObject).Get('id').JsonValue.Value;
      calendarID := (JsonArray.Get(i) as TJSONObject).Get('id').JsonValue.Value;
      end;
     end;

   URL:='https://www.googleapis.com/calendar/v3/calendars/'+calendarId+'/events/?access_token='+Token+'&maxResults=2500';
   Events:=TJSONObject.ParseJSONValue(IdHTTP1.Get(URL))as TJSONObject;
   JsonArrayEvents:=Events.Get('items').JsonValue as TJSONArray;
  for I := 0 to JsonArrayEvents.Size-1 do
  begin
      EventId:=(JsonArrayEvents.Get(i) as TJSONObject).Get('id').JsonValue.Value;
      ComboBox1.Items.Add(EventId);
  end;
   lbEventsCount.Caption:=lbEventsCount.Caption+IntTostr(i);
   end;





procedure TForm1.FormCreate(Sender: TObject);
begin
Form1.Height:=150;
PageControl1.Visible:=false;
ExcelStatus:=false;
GAuothStatus:=false;
edToken.Visible:=false;
btnConfirm.Visible:=false;
Calendars.Visible:=false;
btnSendEvents.Visible:=false;
btnClearCalendar.Visible:=false;
StatusBar1.Panels[0].width:=150;
StatusBar1.Panels[0].text:='Excel: ';
StatusBar1.Panels[1].width:=150;
StatusBar1.Panels[1].text:='Google: ';

 //Короткое имя исполняемого файла программы (без пути к нему).
  ApplicationName := ExtractFileName( ParamStr(0) );
  //Путь к папке, в которой лежит исполняемый файл программы.
  ApplicationPath := ExtractFilePath( ParamStr(0) );
  AddRegistry;




end;

procedure TForm1.AddRegistry;
  var regKey: TRegistry;
begin
  regKey := TRegistry.Create;
  regKey.RootKey := HKEY_LOCAL_MACHINE;
  regKey.OpenKey('\SOFTWARE\Wow6432Node\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION\', false);
  regKey.WriteInteger(ApplicationName, 8000);
  regKey.CloseKey;
  regKey.Free;
end;



end.
